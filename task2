import 'package:flutter/material.dart';

void main() {
  runApp(const ManahilsAnimations());
}

class ManahilsAnimations extends StatelessWidget {
  const ManahilsAnimations({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: "Manahil's Animations",
      theme: ThemeData(
        primarySwatch: Colors.purple,
        scaffoldBackgroundColor: Colors.grey[100],
        appBarTheme: AppBarTheme(
          backgroundColor: Colors.deepPurple,
          titleTextStyle: TextStyle(
            color: Colors.white,
            fontSize: 24,
            fontWeight: FontWeight.bold,
          ),
        ),
      ),
      home: const ExplicitAnimationDemo(),
    );
  }
}

class ExplicitAnimationDemo extends StatefulWidget {
  const ExplicitAnimationDemo({super.key});

  @override
  State<ExplicitAnimationDemo> createState() => _ExplicitAnimationDemoState();
}

class _ExplicitAnimationDemoState extends State<ExplicitAnimationDemo>
    with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _animation;
  bool _isAnimating = false;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      vsync: this,
      duration: const Duration(seconds: 2),
    );

    _animation = Tween<double>(begin: 0, end: 1).animate(_controller)
      ..addListener(() {
        setState(() {});
      })
      ..addStatusListener((status) {
        if (status == AnimationStatus.completed) {
          setState(() {
            _isAnimating = false;
          });
        } else if (status == AnimationStatus.dismissed) {
          setState(() {
            _isAnimating = false;
          });
        }
      });
  }

  void _toggleAnimation() {
    if (_isAnimating) {
      _controller.stop();
    } else {
      if (_controller.status == AnimationStatus.completed) {
        _controller.reverse();
      } else {
        _controller.forward();
      }
    }
    setState(() {
      _isAnimating = !_isAnimating;
    });
  }

  void _resetAnimation() {
    _controller.reset();
    setState(() {
      _isAnimating = false;
    });
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final screenWidth = MediaQuery.of(context).size.width;
    final containerSize = 80.0;

    return Scaffold(
      appBar: AppBar(
        title: const Text("Manahil's Animations"),
        centerTitle: true,
      ),
      body: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          // Animated container
          Container(
            height: 150,
            margin: const EdgeInsets.symmetric(vertical: 30),
            child: Stack(
              children: [
                Positioned(
                  left: _animation.value * (screenWidth - containerSize),
                  child: Container(
                    width: containerSize,
                    height: containerSize,
                    decoration: BoxDecoration(
                      gradient: const LinearGradient(
                        colors: [Colors.purple, Colors.deepPurple],
                        begin: Alignment.topLeft,
                        end: Alignment.bottomRight,
                      ),
                      borderRadius: BorderRadius.circular(20),
                      boxShadow: [
                        BoxShadow(
                          color: Colors.purple.withOpacity(0.5),
                          blurRadius: 10,
                          spreadRadius: 2,
                          offset: const Offset(0, 5),
                        ),
                      ],
                    ),
                    child: const Icon(
                      Icons.star,
                      color: Colors.amber,
                      size: 40,
                    ),
                  ),
                ),
              ],
            ),
          ),

          // Track line
          Container(
            height: 4,
            width: screenWidth - 60,
            margin: const EdgeInsets.only(bottom: 40),
            decoration: BoxDecoration(
              color: Colors.deepPurple.withOpacity(0.2),
              borderRadius: BorderRadius.circular(2),
            ),
          ),

          // Control buttons
          Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              ElevatedButton.icon(
                onPressed: _toggleAnimation,
                icon: Icon(
                  _isAnimating ? Icons.pause : Icons.play_arrow,
                  color: Colors.white,
                ),
                label: Text(
                  _isAnimating ? 'Pause' : 'Play',
                  style: const TextStyle(color: Colors.white),
                ),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.deepPurple,
                  padding: const EdgeInsets.symmetric(
                      horizontal: 20, vertical: 15),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(10),
                  ),
                ),
              ),
              const SizedBox(width: 20),
              OutlinedButton.icon(
                onPressed: _resetAnimation,
                icon: const Icon(Icons.replay, color: Colors.deepPurple),
                label: const Text('Reset',
                    style: TextStyle(color: Colors.deepPurple)),
                style: OutlinedButton.styleFrom(
                  padding: const EdgeInsets.symmetric(
                      horizontal: 20, vertical: 15),
                  side: const BorderSide(color: Colors.deepPurple),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(10),
                  ),
                ),
              ),
            ],
          ),

          // Animation speed control
          Padding(
            padding: const EdgeInsets.only(top: 30),
            child: Column(
              children: [
                const Text(
                  'Animation Speed',
                  style: TextStyle(
                    color: Colors.deepPurple,
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                Slider(
                  value: _controller.duration!.inMilliseconds.toDouble(),
                  min: 500,
                  max: 3000,
                  divisions: 5,
                  label:
                  '${(_controller.duration!.inMilliseconds / 1000).toStringAsFixed(1)}s',
                  activeColor: Colors.deepPurple,
                  inactiveColor: Colors.deepPurple.withOpacity(0.3),
                  onChanged: (value) {
                    setState(() {
                      _controller.duration =
                          Duration(milliseconds: value.toInt());
                    });
                  },
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}
